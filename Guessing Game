Write pseudocode in Java style to map out your logic, then use your pseudocode to write your MIPS code.
Sample Execution

I'm thinking of a number between 0 and 100, can you guess it?
enter your guess: 50
too high...try again
enter your guess: 30
too low...try again
enter your guess: 40
too high...try again
enter your guess: 35
too high...try again
enter your guess: 33
too high...try again
enter your guess: 31
you guessed it!
number of guesses: 6
play again? (0 - no, 1 - yes): 1

I'm thinking of a number between 0 and 100, can you guess it?
enter your guess: 50
too low...try again
enter your guess: 75
too low...try again
enter your guess: 88
too high...try again
enter your guess: 82
too high...try again
enter your guess: 78
too high...try again
enter your guess: 76
too low...try again
enter your guess: 77
you guessed it!
number of guesses: 7
play again? (0 - no, 1 - yes): 0

Random Numbers

This game will use pseudo random numbers, not true random numbers. Pseudo random numbers are generated by an algorithm that uses an arbitrary starting number, called the "seed" value. MIPS has syscalls which can be used to initialize the seed value and then generate pseudo random numbers. To initialize the seed value we will use a syscall that gets the low order bits of the system clock, which is the number of seconds since the start of January 1, 1970, which is the start of the Unix epoch.

The following code gets a value for the seed and initializes the pseudo random number generator. Put this code at the beginning of your program, before any loops. The code contains tab characters and it should line up nicely when you copy and paste it into MARS.

# set up random number generator
	addi	$v0, $zero, 30		# syscall 30: get low order bits of system time
	syscall				# $a0 will contain the 32 least significant bits of the system time
	add	$t0, $zero, $a0 	# save $a0 value in $t0

	addi	$v0, $zero, 40		# syscall 40: set seed for random number generation
	add	$a0, $zero, $zero	# set ID of this random number generator to 0
	add	$a1, $zero, $t0		# use random seed stored above in $t0
	syscall

The following code generates a random number and copies it to $s0. Put it in your program so that it will execute at the start of each game. The code contains tab characters and it should line up nicely when you copy and paste it into MARS.

	addi	$v0, $zero, 42		# syscall 42: set range of random int generated
	add	$a0, $zero, $zero	# set range for generator 0
	addi	$a1, $zero, 101		# set upper bound of random num to 101 (exclusive)
	syscall
	add	$s0, $zero, $a0		# copy the random number to $s0

Comments

Make sure your program includes comments. You need comments at the top with your name and lab number, and comments for every line of executable code. You can have one comment for all statements required for a syscall. Comments should reflect the purpose of a statement, not just repeat the instruction. For example, write a comment like

	addi	$t1, $t1, 1		# increment number of guesses

rather than

	addi	$t1, $t1, 1		# add 1 to $t1
